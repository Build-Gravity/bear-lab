import os
import pandas as pd
from typing import Optional

from src.pipeline import execute_full_analysis

# Configuration Constants
# Assumes input_data is one level up from src when main.py is in src/
INPUT_DATA_DIR: str = os.path.join(os.path.dirname(__file__), '..', 'input_data')
ACTIVATION_KEYWORD: str = "activation" 
BLOCK_NAME_PREFIX_KEYWORD: str = "plate:"
MIN_POINTS_FOR_ANALYSIS: int = 4
MIN_POINTS_PER_PHASE: int = 2
EXPECTED_KINETIC_SHAPE: str = 'u-shape' # Added for explicitness

# Define output directory names
OUTPUT_DATA_DIR_NAME: str = "output_data"
OUTPUT_PLOTS_DIR_NAME: str = "output_plots"


def run_analysis_controller(
    input_dir: str, 
    activation_keyword: str, 
    block_name_prefix: str,
    output_plots_dir_path: Optional[str], # New parameter
    min_points_overall: int,
    min_points_phase: int,
    kinetic_shape: str
) -> Optional[pd.DataFrame]:
    """
    Controller function to invoke the main analysis pipeline.
    Passes configurations to the pipeline and returns the results.
    """
    print(f"--- Main Controller: Initiating Analysis ---")
    results_df: Optional[pd.DataFrame] = execute_full_analysis(
        input_dir=input_dir,
        activation_keyword=activation_keyword,
        block_name_prefix=block_name_prefix,
        output_plots_dir=output_plots_dir_path, # Pass to pipeline
        min_points_for_analysis=min_points_overall,
        min_points_per_phase=min_points_phase,
        expected_kinetic_shape=kinetic_shape
    )
    print(f"--- Main Controller: Analysis Complete ---")
    return results_df


if __name__ == "__main__":
    print(f"Attempting to run analysis using input directory: {INPUT_DATA_DIR}")
    
    # Determine project root and define output paths
    project_root: str = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    output_data_path: str = os.path.join(project_root, OUTPUT_DATA_DIR_NAME)
    output_plots_path: str = os.path.join(project_root, OUTPUT_PLOTS_DIR_NAME)

    # Create output directories if they don't exist
    os.makedirs(output_data_path, exist_ok=True)
    os.makedirs(output_plots_path, exist_ok=True) # For plots
    print(f"Ensured output data directory exists: {output_data_path}")
    print(f"Ensured output plots directory exists: {output_plots_path}")
    
    final_results_df: Optional[pd.DataFrame] = run_analysis_controller(
        input_dir=INPUT_DATA_DIR,
        activation_keyword=ACTIVATION_KEYWORD,
        block_name_prefix=BLOCK_NAME_PREFIX_KEYWORD,
        output_plots_dir_path=output_plots_path, # Pass plots path
        min_points_overall=MIN_POINTS_FOR_ANALYSIS,
        min_points_phase=MIN_POINTS_PER_PHASE,
        kinetic_shape=EXPECTED_KINETIC_SHAPE
    )

    if final_results_df is not None:
        print("\n--- Final Compiled Results (from Main) ---")
        print(final_results_df.to_string()) #type: ignore

        # Save to output_data directory
        output_csv_filename: str = "cftr_activation_kinetics_results.csv"
        output_csv_full_path: str = os.path.join(output_data_path, output_csv_filename)
        
        try:
            final_results_df.to_csv(output_csv_full_path, index=False)
            print(f"\nResults successfully saved to: {output_csv_full_path}")
        except Exception as e:
            print(f"\nError saving results to CSV: {e}")
    else:
        print("\nNo results were generated by the pipeline.") 